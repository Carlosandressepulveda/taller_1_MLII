Ahora, aplica reducción de dimensionalidad usando todos los algoritmos para entrenar el modelo con solo 2 características por imagen.
- Grafica las 2 nuevas características generadas por tu algoritmo.
- ¿Esto afecta de alguna manera el rendimiento de tu modelo?
import numpy as np
import matplotlib.pyplot as plt
from no_supervisado import PCA, SVD, tSNE
from sklearn.datasets import fetch_openml
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

mnist = fetch_openml('mnist_784')
X = mnist.data
y = mnist.target
X_08 = X[(y == '0') | (y == '8')]
y_08 = y[(y == '0') | (y == '8')]

Convertir las etiquetas de clase a enteros
y_08 = y_08.astype(int)

scaler = StandardScaler()
X_08_scaled = scaler.fit_transform(X_08)

Dividir los datos transformados en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X_08_scaled, y_08, test_size=0.2, random_state=42)

Crear y entrenar el modelo de regresión logística
modelo = LogisticRegression(random_state=42, max_iter=1000)
modelo.fit(X_train, y_train)

Evaluar el rendimiento del modelo en los datos de prueba
precision = modelo.score(X_test, y_test)
print(f"La precisión del modelo es: {precision:.2f}")

Utilizar el método SVD
descomp_svd = SVD(n_components=2)
X_08_descomp_svd = descomp_svd.fit_transform(X_08_scaled)

Utilizar el método t-SNE
descomp_tsne = tSNE(n_components=2)
X_08_descomp_tsne = descomp_tsne.fit_transform(X_08_scaled)

Utilizar el método PCA
descomp_pca = PCA(n_components=2)
X_08_descomp_pca = descomp_pca.fit_transform(X_08_scaled)

Crear las gráficas y agregar la precisión en el título
fig, axs = plt.subplots(1, 3, figsize=(12, 4))

for i, (X_transformed, titulo) in enumerate(zip([X_08_descomp_svd, X_08_descomp_tsne, X_08_descomp_pca], ['SVD', 't-SNE', 'PCA'])):
axs[i].scatter(X_transformed[:, 0], X_transformed[:, 1], c=y_08, cmap='viridis')
axs[i].set_title(f"{titulo} - Precisión: {precision:.2f}")

plt.show()
