import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.decomposition import TruncatedSVD
from sklearn.datasets import fetch_openml
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

mnist = fetch_openml('mnist_784')
X = mnist.data
y = mnist.target
X_08 = X[(y == '0') | (y == '8')]
y_08 = y[(y == '0') | (y == '8')]

# Convertir las etiquetas de clase a enteros
y_08 = y_08.astype(int)

escalador = StandardScaler()
X_08_escalado = escalador.fit_transform(X_08)

# Dividir los datos transformados en conjuntos de entrenamiento y prueba
X_entrenamiento, X_prueba, y_entrenamiento, y_prueba = train_test_split(X_08_escalado, y_08, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de regresión logística
modelo = LogisticRegression(random_state=42, max_iter=1000)
modelo.fit(X_entrenamiento, y_entrenamiento)

# Evaluar el rendimiento del modelo en los datos de prueba
exactitud = modelo.score(X_prueba, y_prueba)
print(f"La exactitud del modelo es: {exactitud:.2f}")

# Utilizar el método SVD
svd = TruncatedSVD(n_components=2)
X_08_svd = svd.fit_transform(X_08_escalado)

# Utilizar el método t-SNE
tsne = TSNE(n_components=2)
X_08_tsne = tsne.fit_transform(X_08_escalado)

# Utilizar el método PCA
pca = PCA(n_components=2)
X_08_pca = pca.fit_transform(X_08_escalado)

# Crear las gráficas y agregar la exactitud en el título
fig, axs = plt.subplots(1, 3, figsize=(12, 4))

for i, (X_transformado, titulo) in enumerate(zip([X_08_svd, X_08_tsne, X_08_pca], ['SVD', 't-SNE', 'PCA'])):
    axs[i].scatter(X_transformado[:, 0], X_transformado[:, 1], c=y_08, cmap='viridis')
    axs[i].set_title(f"{titulo} - Exactitud: {exactitud:.2f}")
    
plt.show()
